<!DOCTYPE HTML>
<html><head>
  <meta content="text/html; charset=ISO-8859-1" http-equiv="content-type">
  <title>Temporisation WakeUp DD</title>
<HTA:APPLICATION
  APPLICATIONNAME="WakeUp Dock"
  ID="WakeUpDockHTA"
  SINGLEINSTANCE="no"
  VERSION="4.6 du 12/03/2024 [Auteur : <JJ Delalandre>jjdelalandre@gmail.com]"
  ICON="favicone_cocotte_blue.png"
  SCROLL="no"
  CLOSE="no"
  RESIZE="no"
  CLOSEBUTTON="no"
  BORDER="thin"
  BORDERSTYLE="sunken"
  SHOWINTASKBAR="Yes"
  WINDOWSTATE="Normal"
  CONTEXTMENU="no" 
  MAXIMIZEBUTTON="No" 
  MINIMIZEBUTTON="Yes" 
  NAVIGABLE="no"
  BORDERSTYLE="craised" />

    <link rel="stylesheet" type="text/css" href="include/wakeUp.css">
    <script src="include/wakeUp.js"></script>
</head>

<script language="javaScript">
//================== JAVASCRIPT ================================

</script>


<script language="VBScript">
'================== Declaration public ================================
'*** Préparation de l'environnement
Option Explicit
const cstStatusFile = 0
const cstCreateFile = 1
const cstDeleteFile = 2

dim fnc
dim mobidic, dico
dim gBolOk, fileName, isRunning
dim beginTime, endTime, Duree 
dim fichierTXT

'Dim oShell: Set oShell = CreateObject("WScript.Shell")
dim fso:    Set fso = CreateObject("Scripting.FileSystemObject" )
dim tsLogTimeStamp :  tsLogTimeStamp = ""
dim currentDrive

'================== EVENTS ============================================
'----------------------------------------------
'
'----------------------------------------------
sub Window_OnLoad
    window.resizeTo 800, 550
	document.title = document.title & ",  Version " &   WakeUpDockHTA.Version
    set fnc = load_class ("funotheque")
 
    'load_config
    set mobidic = fnc.load_iniFile("config.ini")
    set dico = fnc.load_iniFile("language\" & mobidic("language") & ".ini")
call set_log ("Window_OnLoad", "begin")

    update_interface_language
    call fill_ListLanguage(mobidic("language"))	
    'lstLanguage.value=mobidic("language")
    if mobidic("multiDrives") = 1 then
        trChkDrives.style.display = ""
        trLstDrives.style.display = "none"
    else
        trChkDrives.style.display = "none"
        trLstDrives.style.display = ""
    
    end if
    
    call event_updateDrives()
    
    update_buttons 0
    
    frmTempo.value = mobidic("tempo")
    frmEssais.value = mobidic("essais")
    frmFileName.value  = mobidic("fileName")
    frmChkLog.checked  = (mobidic("saveLog") = 1)

    'call set_message(FormatDateTime(Now, vbGeneralDate), frmBeginDate) 
    'call set_message(FormatDateTime(Now, vbGeneralDate), frmEndDate) 
    if mobidic("delLogOnStart") = 1 then clearLog()
'''getPosObj("cmdRun")   
'''msgbox   cmdRun.id
end sub


'----------------------------------------------
'
'----------------------------------------------
sub Window_onUnload()
call set_log ("Window_onUnload", "begin")
    call isRuning (2, "")
    call set_log ("Window_onUnload", mobidic("msg_quit"))
end sub
'----------------------------------------------
'
'----------------------------------------------
sub event_updateLanguage()
call set_log ("event_updateLanguage", "begin")

    mobidic("language") = lstLanguage.value
    set dico = fnc.load_iniFile("language\" & mobidic("language") & ".ini")
        
    update_interface_language () 

end sub
'----------------------------------------------
'
'----------------------------------------------
sub event_openURL (url) 
call set_log ("event_openURL", "begin")
    oShell.run url
end sub
'----------------------------------------------
'
'----------------------------------------------
sub event_openHelp () 
call set_log ("event_openHelp", "begin")
    if mobidic("language") = "french" then
        event_openURL "https://github.com/JJDai54/WakeUp_Dock/blob/main/docs/help_fr.pdf"
    else
        event_openURL "https://github.com/JJDai54/WakeUp_Dock/blob/main/docs/help_en.pdf"
    end if
end sub

'----------------------------------------------
'
'----------------------------------------------
sub event_updateFrmInput(sName)
call set_log ("event_updateFrmInput", "begin")
dim newValue
dim obName, obFrm
    sName = lCase(sName)
    obName = "frm" & ucase(left(sName,1)) & mid(sName,2)
    set obFrm = document.getElementById(obName)    
   
    on error resume next
    newValue = cInt(trim (inputBox("Entrez la nouvelle valeur", WakeUpDockHTA.ApplicationName, mobidic(sName))))
    if error.number = 0 then
      if newValue <> obFrm.value AND newValue <> 0 AND IsNumeric(newValue) then 
          obFrm.value = newValue
          mobidic(newValue) = obFrm.value
       end if  
     end if
end sub

'----------------------------------------------
'
'----------------------------------------------
sub event_updateDrives()
call set_log ("event_updateDrives", "begin")
dim activDrives, driveDefault

    activDrives = fnc.get_activeDrives()
    driveDefault = mobidic("drivesDefault") 


    ''' pour les tests
    if mobidic("testDrives") <> "" then
        activDrives = activDrives & mobidic("testDrives") 
        driveDefault = driveDefault & mobidic("testDrives") 
    end if
    
    if mobidic("multiDrives") = 1 then
        call fill_chkDrives(activDrives, driveDefault)
    else
        call fill_listDrives(activDrives, driveDefault)
    end if

end sub
'----------------------------------------------
'
'----------------------------------------------
sub event_runTemporisation()
call set_log ("event_runTemporisation", "begin")
dim lstDrives 
  
  call set_log ("multiDrives", mobidic("multiDrives"))  
  if mobidic("multiDrives") = 1 then
    lstDrives = getDrivesChecked()
   
    if len(lstDrives) = 1 then
        runTemporisation_one(lstDrives)
    else
        runTemporisation_multi(lstDrives)
    end if
  else
    runTemporisation_one(mobidic("drive"))
  end if
  
end sub
'----------------------------------------------
'
'----------------------------------------------
sub event_stopTemporisation( )
call set_log ("event_stopTemporisation", "begin")
dim r
    call set_log ("event_stopTemporisation", dico("msg_stopTempo"))
    call isRuning (2,"")
    gBolOk = false
    update_buttons 2
     
end sub
'----------------------------------------------
'
'----------------------------------------------
sub event_saveConfig()
call set_log ("event_saveConfig", "begin")
    call fnc.save_iniFile (mobidic, "config.ini", false, 16)
end sub

'----------------------------------------------
'
'----------------------------------------------
sub event_closeTemporisation()
call set_log ("event_closeTemporisation", "begin")
    ''msgbox("On ferme")
	On Error Resume Next
	window.close()
	On Error Goto 0

end sub 
'----------------------------------------------
'
'----------------------------------------------
function load_class(className)
Dim classFile : classFile = "include\" & className & ".vbs"
Dim vbsFile : Set vbsFile = fsO.OpenTextFile(classFile, 1, False)
Dim myFunctionsStr : myFunctionsStr = vbsFile.ReadAll
dim cls

    vbsFile.Close
    Set vbsFile = Nothing

    ExecuteGlobal myFunctionsStr
    Set cls = (New Funotheque)()
'cls.toString()
    set load_class = cls
end function

'----------------------------------------------
'
'----------------------------------------------
function update_interface_language () 
call set_log ("update_interface_language", "begin")
  
    cmdRun.innerHTML = dico("msg_executeTempo")
    cmdStop.innerHTML = dico("msg_kilTempo")
    cmdSaveConfig.innerHTML = dico("msg_SaveConfig")
    cmdQuit.innerHTML = dico("msg_closeWindow")
    cmdUpdateDrives.innerHTML = dico("msg_refreshDrives") 
     
    msg_libLecteur.innerHTML = dico("msg_libLecteur")
    msg_libLanguage.innerHTML = dico("msg_libLanguage")
    msg_libTempo.innerHTML = dico("msg_libTempo")
    msg_libFile.innerHTML = dico("msg_libFile")
    msg_libBeginDate.innerHTML = dico("msg_libBeginDate")
    msg_libEndDate.innerHTML = dico("msg_libEndDate")
    msg_libDuree.innerHTML = dico("msg_libDuree")
    msg_libCounter.innerHTML = dico("msg_libCounter")
    msg_libLog.innerHTML = dico("msg_libLog")
    msg_libNbEssai.innerHTML = dico("msg_libNbEssai")
    msg_libChkLog.innerHTML = dico("msg_libChkLog")
    
    msg_LecteurToWakeUp.innerHTML = dico("msg_lecteurToWakeUp")
    msg_duree.innerHTML = dico("msg_duree")
    msg_fileName.innerHTML = dico("msg_fileName")
    msg_dateBegin.innerHTML = dico("msg_dateBegin")
    msg_dateEnd.innerHTML = dico("msg_dateEnd")
    msg_dureeOfProcess.innerHTML = dico("msg_dureeOfProcess")
    msg_nbWakeUp.innerHTML = dico("msg_nbWakeUp")
    msg_langInterface.innerHTML = dico("msg_langInterface")
    msg_Essais.innerHTML = dico("msg_Essais")
    msg_log.innerHTML = dico("msg_log")
    msg_chkLog.innerHTML = dico("msg_chkLog")

End function
'----------------------------------------------
'
'----------------------------------------------
function update_timer()
call set_log ("update_timer", "begin")
dim secondes, minutes, heures

    endTime = Now()
    call set_message(FormatDateTime(endTime, vbGeneralDate), frmEndDate)    
    duree = endTime - beginTime
    secondes = DateDiff("s", beginTime, endTime)
    minutes  = DateDiff("n", beginTime, endTime)
    heures   = DateDiff("h", beginTime, endTime)
    duree = secondes
    
    call set_message(heures & " heures " & minutes & " minutes " & secondes & " secondes", frmDuree)    
    
end function
'----------------------------------------------
'
'----------------------------------------------
function update_buttons(action)
call set_log ("update_buttons", "begin")

    select case (action)
    case 1 : '*** execution
      cmdRun.disabled = true    
      cmdStop.disabled = false
      cmdQuit.disabled = true 
      cmdSaveConfig.disabled = true
      lstDrives.disabled=true
      frmFileName.disabled=true
      frmChkLog.disabled = true
      
    case 2: '*** stop
      cmdRun.disabled = true    
      cmdStop.disabled = true
      cmdQuit.disabled = true 
      cmdSaveConfig.disabled = true
      frmChkLog.disabled = true
      
    case else: '*** en attente
      cmdRun.disabled = false    
      cmdStop.disabled = true
      cmdQuit.disabled = false 
      lstDrives.disabled=false
      frmFileName.disabled=false
      cmdSaveConfig.disabled = false
      frmChkLog.disabled = false
    
    end select

    
    update_buttons = true  
 ''   call set_log ("update_buttons", dico("msg_stopTempo") & "(" & mobidic("tempo") & " secondes)") 
end function


'----------------------------------------------
'
'----------------------------------------------
function fill_listDrives(activDrives, driveDefault)
call set_log ("fill_listDrives", "begin")

    call jsLoadLecteurs(activDrives, driveDefault)
    ''fill_listDrives = activDrives

end function

'----------------------------------------------
'
'----------------------------------------------
function fill_chkDrives(activDrives, driveDefault)
call set_log ("fill_chkDrives", "begin")
dim h, lettre, isChecked
dim lecteurs, html, balise
dim sep

    html = ""
    sep = " - "
    
    for h=1 to len(activDrives)    
        lettre = mid(activDrives, h, 1)
        isChecked = ""
        if (instr(driveDefault, lettre) > 0) then isChecked = "checked"

        balise = sep & "<input type='checkbox' id='{id}' name='{name}' value='{value}' {checked} />" 
        balise = balise & "<label for='{value}'>{libelle}</label>"
        balise = replace(balise, "{id}", "drive-" & lettre)
        balise = replace(balise, "{name}", "drive-" & lettre)
        balise = replace(balise, "{value}", lettre)
        balise = replace(balise, "{checked}", isChecked)
        balise = replace(balise, "{libelle}", lettre)

        html = html & balise
    next
    
        html = html & "<button class='btnActionRefresh' type='button' name='cmdUpdateDrives' value='cmdUpdateDrives' title='Refresh' onclick='event_updateDrives()'>...</button>"
    'alert(html)
    divDrives.innerHTML = mid(html, len(sep)+1)    

End function

'----------------------------------------------
'
'----------------------------------------------
function fill_ListLanguage(languageDefault)
call set_log ("fill_ListLanguage", "begin")
dim languages

    languages = fnc.get_files("language", "ini", true)
    call jsLoadList("lstLanguage", languages, languageDefault)
    fill_ListLanguage = languages
end function


'================== Fonctions =========================================

'----------------------------------------------
'
'----------------------------------------------
function set_message(Message, objDiv)
      objDiv.innerHTML = Message
end function

'----------------------------------------------
'
'----------------------------------------------
function set_log(fncName, sMessage)
dim tsLog
dim sAppPath  : sAppPath = getAppPath()      
dim sBeginLog 
dim sFileLog  

    call set_message(fncName & "-" & sMessage, frmLog)
    if (mobidic("saveLog") <> 1) then exit function
    '-------------------------------------------------------'
    if tsLogTimeStamp = "" then 
        tsLogTimeStamp =  replace(replace(FormatDateTime(now, 0),"/" , "-"),":","-") 'vbGeneralDate = 0'
   
        sBeginLog = "Drive : {drive} - Tempo : {tempo} - fichier : {fileName} - language : {language} - esssai : {essais}"
        sBeginLog = replace(sBeginLog, "{drive}", mobidic("drive"))
        sBeginLog = replace(sBeginLog, "{tempo}", mobidic("tempo"))
        sBeginLog = replace(sBeginLog, "{fileName}", mobidic("fileName"))
        sBeginLog = replace(sBeginLog, "{language}", mobidic("language"))
        sBeginLog = replace(sBeginLog, "{essais}", mobidic("essais"))
    end if
    
    sFileLog = sAppPath & "log\WakeUp_Dock-" & tsLogTimeStamp & ".log" 
    Set tsLog = fso.OpenTextFile(sFileLog , 8, True ) 'ForAppending = 8'

    if sBeginLog <> "" then 
        call tsLog.writeLine(string(80,"-"))
        call tsLog.writeLine(sBeginLog)
        call tsLog.writeLine(string(80,"-"))
    end if
    
    tsLog.writeLine FormatDateTime(now, 0) & "-" & fncName & "-" & sMessage
    tsLog.close

end function

'----------------------------------------------
'
'----------------------------------------------
function getAppPath () 
dim sPath 
dim h
    h=instrrev(WakeUpDockHTA.commandLine,"\")
    sPath = left(WakeUpDockHTA.commandLine,h)
    sPath = mid(spath,2)
    getAppPath = sPath
end function

'----------------------------------------------
'
'----------------------------------------------
sub initTemporisation( )
call set_log ("initTemporisation", "begin")

    call clearLog()
    
    call set_log ("initTemporisation", dico("msg_initTempo"))
    mobidic("tempo") = frmTempo.value
    mobidic("essais") = frmEssais.value
    mobidic("fileName") = frmFileName.value
    mobidic("drive") = lstDrives.value
    gBolOk = true
    update_buttons 0
    beginTime = Now()
    Duree = 0

    call set_message(FormatDateTime(Now, vbGeneralDate), frmBeginDate) 
    call set_message(FormatDateTime(Now, vbGeneralDate), frmEndDate) 
    
end sub
'----------------------------------------------
'
'----------------------------------------------
sub runTemporisation_multi(lstDrives)
call set_log ("runTemporisation_multi", "begin")
dim drive
dim h
dim drivesErr : drivesErr = ""
dim drivesOk  :  drivesOk = ""
dim bolOk
dim R
dim msg
dim numErr

    initTemporisation()
    update_buttons 2
    
'     numErr = sleep(3) 
'     if numErr > 0 then 
'         alert "error sleep" 
'         update_buttons 0
' 
'         ''err.raise numErr
'         exit sub
'     end if 
    'gBolOk = true
    call set_log ("runTemporisation_multi", "lstDrives : " & lstDrives)
    
'''    msgbox dico("msg_function_not_implemented") &  " : " & lstDrives
    for h = 1 to len(lstDrives)
        drive = mid(lstDrives,h,1)
        call set_log ("runTemporisation_multi", "drive : " & drive)
        bolOk = isRuning(cstCreateFile, drive) 
        if not bolOk then
          msg = replace(dico("msg_function_drive_err"),"{drive}", drive)
          msg = replace(msg, "\n", chr(13))
          r = msgbox(msg, 4 + 4096)   'vbTesNo + vbSystemModal' 
          if r <> 6 then 
              exit sub
          end if
        else
            drivesOk = drivesOk  & drive
        end if
        ''if not gBolOk then exit for
    next

    '-------------------------------------------------'    
    msg = replace(dico("msg_function_drive_ok"),"{drives}", drivesOk)
    r = msgbox(msg, 4 + 4096)   'vbTesNo + vbSystemModal' 
    if r <> 6 then 
        exit sub
    end if
    
    mobidic("drives") = drivesOk
    call set_log ("runTemporisation_multi", "lstDrives ok : " & lstDrives)
    call runTemporisation_ok(drivesOk)
    call clearAllTempFile(drivesOk)
    '''alert "fin de traitement"
    update_buttons 0
end sub
'----------------------------------------------
'
'----------------------------------------------
sub runTemporisation_ok(lstDrives)
call set_log ("runTemporisation_ok", "begin")
dim fichierTXT : fichierTXT = ""
dim h : h = 0
dim k : k = 0
dim drive
dim bolOk

    update_buttons 1
''' msgbox "runTemporisation_one ===>1"
    call set_log ("runTemporisation_ok", "lstDrives ok : " & lstDrives)
    gBolOk = true
    
    do while  gBolOk
            h = h + 1            
        
        for k = 1 to len(lstDrives)
            drive = mid(lstDrives, k, 1)
            update_timer()
            on error resume next
            if fso.fileExists(fichierTXT) AND fichierTXT <> "" then
                call set_log ("runTemporisation_ok", dico("msg_deleteFile") & fichierTXT)
                fso.deleteFile(fichierTXT)
            end if
            on error goto 0

            fichierTXT =  drive  & ":\" & mobidic("fileName") & "_" & h & ".txt"   
            call set_message(h, frmCounter)            
            '*** Création du fichier de temporisation
            on error resume next
            call set_log ("runTemporisation_ok", fichierTXT)
        '---------------------------------------------
            bolOk = createFile(fichierTXT, dico("msg_data1"))
            '''alert fichierTXT   
            if not bolOk then
'                 call set_log ("runTemporisation_ok", dico("Operation annulée"))
'                 update_buttons(0)
                call set_log ("runTemporisation_ok", "probleme : " & fichierTXT)
                gBolOk = false
                exit sub
            end if



            if not isRuning(0, drive) then
                call set_log ("runTemporisation_ok", dico("msg_stopProcess"))
                gBolOk = false
            end if
            if not gBolOk then exit for
        next
        if sleep(mobidic("tempo")) > 0 then gBolOk = false
        if not gBolOk then exit do
    loop 
end sub
'----------------------------------------------
'
'----------------------------------------------
sub clearAllTempFile(lstDrives)
call set_log ("clearAllTempFile", "begin")
'''dim lstDrives : lstDrives = mobidic("drives")
dim h 
    for h = 1 to len(lstDrives)
        call clearTempFile(mid(lstDrives, h, 1))
    next

end sub
'----------------------------------------------
'
'----------------------------------------------
sub clearTempFile(drive)
call set_log ("clearTempFile", "begin")
dim sFile
dim fld, f 
dim lgRootName : lgRootName = len(mobidic("fileName")) 

    sFile = drive  & ":\" & mobidic("fileIsRunning")
    if fso.fileExists(sFile) then
        fso.deleteFile sFile
        call set_log ("clearTempFile", "suppression de  : " & sFile)
    end if   
    
    
    set fld = fso.getFolder(drive & ":\")
    for each f in fld.files
        if (left(f.name, lgRootName) = mobidic("fileName")) then
            f.delete
        end if 
    next
    
end sub
'----------------------------------------------
'
'----------------------------------------------
sub clearLog()
dim fld, f 
dim sAppPath  : sAppPath = getAppPath()

    set fld = fso.getFolder(sAppPath & "log")
    for each f in fld.files
        if (right(f.name, 4) = ".log") then
            f.delete
        end if 
    next
    
end sub
'----------------------------------------------
'
'----------------------------------------------
sub runTemporisation_one(drive)
call set_log ("runTemporisation_one", "begin")
dim newFileTempo
dim h , nbEssai, bolOk
    currentDrive = drive
    
    initTemporisation()
    
    fichierTXT=""
    update_buttons(1)
    if not isRuning(cstCreateFile, drive) then
        update_buttons(0)
        exit sub
    end if
    

    call set_log ("runTemporisation_one", dico("msg_runTempo"))

    h = 0
    do while  gBolOk
        
        update_timer()
        on error resume next
        if fso.fileExists(fichierTXT) AND fichierTXT <> "" then
            call set_log ("runTemporisation_one", dico("msg_deleteFile") & fichierTXT)
            fso.deleteFile(fichierTXT)
        end if
        on error goto 0
        
        h = h + 1
        call set_message(h, frmCounter)
        fichierTXT =  drive  & ":\" & mobidic("fileName") & "_" & h & ".txt" 

        '*** Création du fichier de temporisation
        on error resume next
        call set_log ("runTemporisation_one", dico("msg_createFile") & fichierTXT)
        '---------------------------------------------
        bolOk = createFile(fichierTXT, dico("msg_data1"))
        if not bolOk then
            call set_log ("runTemporisation_one", dico("Operation annulée"))
            update_buttons(0)
            exit sub
        end if

        sleep mobidic("tempo")

        if not isRuning(0, drive) then
            call set_log ("runTemporisation_one", dico("msg_stopProcess"))
            bolOk = false
        end if
        
    loop
    '--- FIN DE LA BOUCLE --------------------------------------
    if fso.fileExists(fichierTXT) then
        call set_log ("runTemporisation_one", dico("msg_deleteFile") & fichierTXT)
        fso.deleteFile(fichierTXT)
    end if
    isRunning cstDeleteFile 
    
    update_timer()
    call set_log ("runTemporisation_one", dico("msg_endTempo"))

end sub

'----------------------------------------------
'
'----------------------------------------------
function createFile(sFile, sMessage)
call set_log ("createFile", "begin")
dim h : h = 0
dim j : j = 0
dim newFile2Open, msg
dim bolOk : bolOk = false
    
 
    on error resume next
    '-----------------------------------------------'
    do while true
        h = h + 1
        msg = replace(dico("msg_testReadDrive"), "{drive}", sFile)
        msg = replace(msg, "{tentatives}", h)
        msg = replace(msg, "{essais}", mobidic("essais"))
        call set_log ("createFile", msg)
        
        err.clear
        Set newFile2Open = fso.CreateTextFile(sFile, TRUE)
        
        if newFile2Open is nothing then
            call set_log ("createFile", "Echec " & h & " de la creationn du fichier : " & sFile)
            if h > cInt(mobidic("essais")) then
                call set_log ("createFile", "Impossible de creer le fichier : " & sFile)
                exit do
            end if
        else
            call newFile2Open.WriteLine(sMessage)
            call newFile2Open.close()
            bolOk = true
            exit do
        end if
        
        if sleep(8) > 0  then exit do
        
    loop
    
    on error goto 0
    createFile = bolOk
    
end function
'----------------------------------------------
'
'----------------------------------------------
function isRuning(action, drive)
call set_log ("isRuning", "begin")
dim r , sFile, tsIsRunning
    
    if drive = "" then
        isRuning = false
        exit function
    end if
    '------------------------------------'
    sFile = drive  & ":\" & mobidic("fileIsRunning")
    
    select case(action)
    case cstCreateFile: '*** creation du fichier
        r = createFile(sFile, drive & " is running")
        if r then 
            call set_log ("isRuning", "ok : " + sFile)
        else
            call set_log ("isRuning", "no : " + sFile)
        end if
        
    case cstDeleteFile: '*** suppression du fichier
        call set_log ("isRuning", dico("msg_deleteFile") & sFile)
        if fso.fileExists(sFile) then
            fso.deleteFile sFile
            call set_log ("isRuning", dico("msg_deleteFile") & sFile)
          r = true
        else
          r = false
        end if
        
    case else: 'cstStatusFile *** etat du fichier
        r = fso.fileExists(sFile)
    end select
    
    isRuning = r
end function

'----------------------------------------------
'
'----------------------------------------------
function sleep (nbSecondes) 
call set_log ("sleep", "begin")
dim sFilePath 
dim numErr : numErr = 0

  err.clear
  sFilePath =  "include\sleep.vbs"
  numErr = oShell.Run (sFilePath & " " & nbSecondes, 1, True)
'     if numErr > 0 then 
'         msgbox "error: " & numErr
'         'quit
'     end if
    sleep = numErr
end function


'==============================================================

</script>

<body>
  <div style="width: 800px;">
    <table>
      <tbody>
        <tr>
          <td class="tdCaption" id="msg_libLanguage">Lecteur</td>
          <td class="tdValue">
            <select name="lstLanguage" id="lstLanguage" onChange="event_updateLanguage()">
            </select></td>
          <td class="tdDescription" id="msg_langInterface">Langue</td>
        </tr>
        <tr name="trLstDrives" id="trlstDrives" style="display: ;">
          <td class="tdCaption" id="msg_libLecteur">Lecteur</td>
          <td class="tdValue">
                <select name="lstDrives" id="lstDrives"></select>
                &nbsp;&nbsp;&nbsp;
                <button style="width: 50;height: 20px;" type="button" name="cmdUpdateDrives" value="cmdUpdateDrives" onclick="event_updateDrives()">...</button>
            </td>
          <td class="tdDescription" id="msg_LecteurToWakeUp">Lettre du lecteur à réveiller</td>
        </tr>

        <tr name="trChkDrives" id="trChkDrives" style="display: none;">
          <td class="tdCaption" id="msg_libDrives">Lecteurs</td>
          <td class="tdValue" colspan="2" width="100%"><fieldset name="divDrives" id="divDrives" class="divDrives">zzz</fieldset></td>
          
        </tr>

        <tr>
            <td class="tdCaption" id="msg_libTempo">Temporisation</td>
            <td class="tdValue">
              <input maxlength="5" size="5" name="frmTempo"  id="frmTempo" class="parameters" value="60" readonly style="color:black;">
              &nbsp;&nbsp;&nbsp;
              <button style="width: 25px; height: 20px;" type="button" name="cmdUpdateTempo" value="cmdUpdateTempo" onclick="event_updateFrmInput('tempo')">...</button>
            </td>
            <td sclass="tdDescription" id="msg_duree">Durée en secondes de la termporisation</td>
        </tr>
        <tr>
            <td class="tdCaption" id="msg_libNbEssai">Nombre d'essai</td>
            <td class="tdValue">
            <input maxlength="5" size="5" name="frmEssais"  id="frmEssais" class="parameters" value="60" readonly style="color:black;">
            &nbsp;&nbsp;&nbsp;
            <button style="width: 25px; height: 20px;" type="button" name="cmdUpdateTempo" value="cmdUpdateEssais" onclick="event_updateFrmInput('essais')">...</button>
          </td>
          <td sclass="tdDescription" id="msg_Essais">Nb essais</td>
        </tr>
        <tr>
          <td class="tdCaption" id="msg_libFile">Fichier</td>
          <td class="tdValue"><input maxlength="30" size="30" name="frmFileName" class="parameters" value="$_wakeUp_[counter].txt"></td>
          <td class="tdDescription" id="msg_fileName">Nom du fichier à créer temporairement pour réveiller le Dock</td>
        </tr>
        <tr>
          <td class="tdCaption" id="msg_libChkLog"></td>
          <td class="tdValue">
            <div>
                <input type="checkbox" name="frmChkLog" id="frmChkLog" checked />
                <label name="msg_chkLog" id="msg_chkLog" for="frmChkLog">Générer un log</label>
            </div>
          </td>
          <td class="tdDescription" id="msg_log">Généraion d'un log</td>
        </tr>
        <tr>
          <td class="" colspan="3"><hr></td>
        </tr>
        <tr>
          <td class="tdCaption" id="msg_libBeginDate">Date début</td>
          <td class="tdValue"><div name="frmBeginDate" id="frmBeginDate"  class="tdCompute" style="width:150px;"></div></td>
          <td class="tdDescription" id="msg_dateBegin">Date heure de déébut de temporisation</td>
        </tr>
        <tr>
          <td class="tdCaption" id="msg_libEndDate">Date courante</td>
          <td class="tdValue"><div name="frmEndDate" id="frmEndDate"  class="tdCompute" style="width:150px;"></div></td>
          <td class="tdDescription" id="msg_dateEnd">Date heure de la denire temporisation</td>
        </tr>
        <tr>
          <td class="tdCaption" id="msg_libDuree">Duree</td>
          <td class="tdValue"><div name="frmDuree" id="frmDuree"  class="tdCompute" style="width:250px;"></div></td>
          <td class="tdDescription" id="msg_dureeOfProcess">Duree depuis le lancement de la temporisation</td>
        </tr>
        <tr>
          <td class="tdCaption" id="msg_libCounter">Compteur</td>
          <td class="tdValue"><div name="frmCounter" id="frmCounter" class="tdCompute" style="width:50px;">0</div></td>
          <td class="tdDescription" id="msg_nbWakeUp">Nombre d'écriture depuis le début de la temporisation</td>
        </tr>
        <tr>
          <td class="tdCaption" id="msg_libLog">Log</td>
          <td  class="tdInfo" colspan="2"><div name="frmLog" id="frmLog"></div></td>
        </tr>
        <tr><td colspan="3"><hr></td></tr>
        <tr>
          <td class="tdCaption" id="msg_libDon"></td>
          <td><center><img src="images/PayPal-donate-01.png" height="32px" alt="" title="" onclick="event_openURL('https://www.paypal.com/donate?hosted_button_id=H9EMH5M4XA48A')"></center></td>
          <td>
            <img src="images/github-02.png" height="32px" alt="" title="" onclick="event_openURL('https://github.com/JJDai54/WakeUp_Dock')">
            &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
            <img src="images/help-01.png" height="32px" alt="" title="" onclick="event_openHelp()">
            &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
            <img src="images/cocotte-blue.png" height="32px" alt="" title="" onclick="event_openURL('https://oritheque.fr')">
          </td>
        </tr>
    <tr><td colspan="3"><hr>
    <br>
    <div style="margin:0px 0px 12px 0px;width:90%;height:44px;padding:0px;text-align:center;">
      <button class="btnAction" type="button" name="cmdRun"   id="cmdRun"  value="cmdRun" onclick="event_runTemporisation()">Lancer la temporisation</button>
      <button class="btnAction" type="button" name="cmdStop"  id="cmdStop" value="cmdStop" onclick="event_stopTemporisation()">Stoper la temporisation</button>
      <button class="btnAction" type="button" name="cmdSaveConfig"  id="cmdSaveConfig" value="cmdSaveConfig" onclick="event_saveConfig()">Sauver la config</button>
      <button class="btnAction" type="button" name="cmdQuit"  id="cmdQuit" value="cmdQuit" onclick="event_closeTemporisation()">Fermer</button><br>
      <br>

    </div>
    </td>
    </tr>
  </div>
      </tbody>
    </table>
</body>

</html>
